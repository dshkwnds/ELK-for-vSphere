##### redis server ####
input {
  redis {
    host => "9.110.85.241"
    port => "6379"
    data_type => "list"
    key => "logstash"
    codec => "json"
    type => "syslog"
    threads => "20"
  }
}
filter {
	if "vCenter" in [tags]{
    	grok {
      	match => [
        "message","%{SYSLOGTIMESTAMP:syslogtimestamp} %{HOST:vCenter} %{SYSLOGPROG:message_program} %{TIMESTAMP_ISO8601:@timestamp} (?<message-body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}])) \[%{DATA:message_service_info}]\ (?<message-syslog>(%{GREEDYDATA})))",
	"message","%{SYSLOGTIMESTAMP:syslogtimestamp} %{HOST:vCenter} %{SYSLOGPROG:message_program} %{TIMESTAMP_ISO8601:@timestamp} (?<message-body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}])) (?<message-syslog>(%{GREEDYDATA})))",
	"message", "<%{POSINT:syslog_pri}>%{TIMESTAMP_ISO8601:@timestamp} %{GREEDYDATA:message-syslog}"
      ]
    }
   	mutate {
	remove_field=> ["message_opID","message-body","message_program","message_thread_id","path","program","type","host","@version","message"]
	}

	if "Datastore datastore-"  in  [message-syslog] {
				drop { }
	} 
	if "-- FINISH task-internal-"  in  [message-syslog] {
				drop { }
	} 
	if "-- BEGIN task-internal-"  in  [message-syslog] {
				drop { }
	} 
	if "Invoke done"  in  [message-syslog] {
				drop { }
	} 
	if "Skipping update of NIC settings for unknown device; key=-1"  in  [message-syslog] {
				drop { }
	}
	if "IPMI info of host"  in  [message-syslog] {
				drop { }
	}

    if "_grokparsefailure" in [tags] {
    if "vCenter" in [tags] {
      grok {
        break_on_match => false
        match => [
          "message", "%{DATA:message_system_info}, (?<message-body>(%{HOST:vCenter} %{SYSLOGPROG:message_program}: %{GREEDYDATA:message-syslog}))",
          "message", "${GREEDYDATA:message-syslog}"
        ]
      }
    }

}
}
	if "ESXi" in [tags] {
        grok {
        match => [
             "message","%{SYSLOGTIMESTAMP:syslogtimestamp} %{SYSLOGHOST:hostname} %{SYSLOGPROG:message_program}: (?<message-body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}]))  \[%{DATA:message_service_info}]\ (?<message-syslog>(%{GREEDYDATA})))",
            "message", "%{SYSLOGTIMESTAMP:syslogtimestamp} %{SYSLOGHOST:hostname} %{SYSLOGPROG:message_program}: (?<message-body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}])) (?<message-syslog>(%{GREEDYDATA})))",
       "message","%{SYSLOGTIMESTAMP:syslogtimestamp} %{SYSLOGHOST:hostname} %{SYSLOGPROG:message_program}: (?<message-body>(%{DATA:syslog_level} %{GREEDYDATA:message-syslog}))"
        ]
        }
        mutate {
                        replace => [ "@source_host", "%{hostname}" ]
                }
        mutate {
                        replace => [ "@message", "%{message-syslog}" ]
                }
	mutate {
        		remove_field=> ["message-body","message_program","path","host","@version"]
        }
}
    if  "Created virtual machine" in [message-syslog] {
	mutate {
	     add_field => {"VM" => "NEW VM"}
		}
}
    if  "State Transition (VM_STATE_DELETING -> VM_STATE_GONE)" in [message-syslog] {
	mutate {
	     add_field => {"VM" => "Del VM"}
		}
}
    if  "State Transition (VM_STATE_REMOVE_SNAPSHOT -> VM_STATE_ON)" in [message-syslog] {
	mutate {
	     add_field => {"VM" => "Remove SanpShot"}
		}
}

    if  "State Transition (VM_STATE_CREATE_SNAPSHOT -> VM_STATE_ON)" in [message-syslog] {
	mutate {
	     add_field => {"VM" => "Create SnapShot"}
		}
}

    if  "State Transition (VM_STATE_REVERT_SNAPSHOT -> VM_STATE_ON)" in [message-syslog] {
	mutate {
	     add_field => {"VM" => "Revert SnapShot"}
		}
}

    if  "State Transition (VM_STATE_EMIGRATING -> VM_STATE_OFF)" in [message-syslog] {
	mutate {
	     add_field => {"VM" => "Migrage"}
		}
}
 
 
    if [syslog_level] == "-->" {
                drop { }
}
    if  "cpu" in [syslog_level]  {
                drop { }
}
if  "IpmiIfcFruMulti:" in [syslog_level]  {
                drop { }
}
if  "IpmiIfcFruGetInv:" in [syslog_level]  {
                drop { }
}

    if  "[VpxLRO]" in [message-syslog]  {
                drop { }
}
    if  "[VpxLroList::ForgetTask]" in [message-syslog]  {
                drop { }
}
    if  "ssl_verifycbhelper:" in [message-syslog]  {
                drop { }
}
    if "[cpuCorrelator]"  in  [message-syslog] {
				drop { }
}
    if "SSL_VerifyCbHelper: Certificate verification is disabled"  in  [message-syslog] {
				drop { }
}
    if [syslog_level] == "verbose" {
                drop { }
}
    if [syslog_level] == "[INFO]" {
                drop { }
}
    if [syslog_level] == "hostd" {
                drop { }
}
    if [syslog_level] == "starting" {
                drop { }
}
    if [syslog_level] == "[ERROR]" {
                drop { }
}
    if "_grokparsefailure" in [tags] {
    if "ESXi" in [tags] {
      grok {
        break_on_match => false
        match => [
          "message", "%{DATA:message_system_info},  (?<message-body>(%{SYSLOGHOST:hostname} %{SYSLOGPROG:message_program}: %{GREEDYDATA:message-syslog}))",
          "message", "${GREEDYDATA:message-syslog}"
        ]
      }
    }
}
}
# ES Cluster  Ring is cluster name
output {
  elasticsearch {
    cluster => "Ring"
    port => "9300"
    flush_size => "50000"
    idle_flush_time => "30"
  }
}
